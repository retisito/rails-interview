<!DOCTYPE html>
<html>
  <head>
    <title>TodoList App - Rails Interview</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <!-- Logs globales para Turbo Stream -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('üöÄ Application loaded - Progress tracking enabled');
        
        // Log global para todos los eventos de Turbo Stream
        document.addEventListener('turbo:before-stream-render', function(event) {
          console.log('\nüåä TURBO STREAM GLOBAL - BEFORE RENDER:');
          console.log('üì¶ Event:', event);
          console.log('üéØ Target:', event.target);
          console.log('‚è∞ Time:', new Date().toLocaleTimeString());
          
          // Intentar extraer informaci√≥n del stream
          if (event.detail) {
            console.log('üìÑ Stream detail:', event.detail);
          }
        });
        
        document.addEventListener('turbo:stream-render', function(event) {
          console.log('\n‚ú® TURBO STREAM GLOBAL - RENDERED:');
          console.log('üì¶ Event:', event);
          console.log('üéØ Target:', event.target);
          console.log('‚è∞ Time:', new Date().toLocaleTimeString());
          
          // Verificar si hay elementos de progreso actualizados
          const progressBars = document.querySelectorAll('[data-progress-target="bar"]');
          progressBars.forEach((bar, index) => {
            console.log(`üìä Barra ${index + 1}: ${bar.style.width || '0%'}`);
          });
          
          const percentageElements = document.querySelectorAll('[data-progress-target="percentage"]');
          percentageElements.forEach((el, index) => {
            console.log(`üî¢ Porcentaje ${index + 1}: ${el.textContent}`);
          });
        });
      });
    </script>
  </head>

  <body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
      <div class="container">
        <%= link_to "TodoList App", root_path, class: "navbar-brand" %>
        <div class="navbar-nav ms-auto">
          <%= link_to "Todas las Listas", todo_lists_path, class: "nav-link" %>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="container mt-4">
      <!-- Flash Messages -->
      <% flash.each do |type, message| %>
        <div class="alert alert-<%= type == 'notice' ? 'success' : 'danger' %> alert-dismissible fade show" role="alert">
          <%= message %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% end %>

      <%= yield %>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Auto-Complete JavaScript -->
    <script>
      function scheduleAutoComplete(mode, delaySeconds = 5) {
        const todoListId = window.location.pathname.split('/')[2]; // Extract ID from URL
        const progressSessionId = getOrCreateProgressSessionId();
        
        let params = {
          mode: mode,
          delay_seconds: delaySeconds,
          session_id: progressSessionId
        };
        
        if (mode === 'random') {
          params.min_delay = 5;
          params.max_delay = 30;
        } else if (mode === 'batch') {
          params.batch_size = 3;
          params.delay_between_batches = 10;
        }
        
        // Show loading state and progress bar
        showToast('‚è≥ Programando completado autom√°tico...', 'info');
        showProgressBar();
        
        fetch(`/api/todolists/${todoListId}/auto_complete`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
          },
          body: JSON.stringify(params)
        })
        .then(response => response.json())
        .then(data => {
          if (data.message) {
            showToast(`üöÄ ${data.message}`, 'success');
            console.log('Job Details:', data.job_details);
            
            // Set up automatic page refresh after completion with extra buffer
            setTimeout(() => {
              showToast('üîÑ Proceso completado, actualizando p√°gina...', 'info');
              setTimeout(() => window.location.reload(), 2000);
            }, Math.max((data.job_details.delay_seconds || 5) * 1000 + 10000, 15000));
          } else {
            showToast(`‚ùå ${data.error}`, 'danger');
            hideProgressBar();
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('‚ùå Error al programar completado autom√°tico', 'danger');
          hideProgressBar();
        });
      }
      
      function getOrCreateProgressSessionId() {
        let sessionId = localStorage.getItem('progress_session_id');
        if (!sessionId) {
          sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
          localStorage.setItem('progress_session_id', sessionId);
        }
        return sessionId;
      }
      
      function showProgressBar() {
        const progressContainer = document.getElementById('progress-container');
        if (progressContainer) {
          progressContainer.style.display = 'block';
          progressContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }
      
      function hideProgressBar() {
        const progressContainer = document.getElementById('progress-container');
        if (progressContainer) {
          progressContainer.style.display = 'none';
        }
      }
      
      function showToast(message, type = 'info') {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
          toastContainer = document.createElement('div');
          toastContainer.id = 'toast-container';
          toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
          toastContainer.style.zIndex = '11';
          document.body.appendChild(toastContainer);
        }
        
        // Create toast
        const toastId = 'toast-' + Date.now();
        const toast = document.createElement('div');
        toast.id = toastId;
        toast.className = `toast align-items-center text-bg-${type} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">${message}</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
          </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Show toast
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        // Remove after hiding
        toast.addEventListener('hidden.bs.toast', () => {
          toast.remove();
        });
      }
    </script>
  </body>
</html>
